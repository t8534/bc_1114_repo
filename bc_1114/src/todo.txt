
1.
Where this label is defined at the LPCXpresso object.
Seems to be urgent, but seems to be not set ?

CHIP_LPC11CXX - but this is for CAN
Seems to be if no any CHIP_LPC11CXX family is defined this is simply LPC1114

2.### DONE
Check init, in depend on define settings on launchpad. 
-D__STARTUP_CLEAR_BSS -D__START=main

Check is BSS area cleared.
Check what about main() call and is initialization correct, in compare
to launchpad shared one.

A: 
After analyze seems to be both are not necessery, and related only
to initialization specific for launchpad examples.
Done.

3.
Update linker script area memory

4.
Look for the rest of flags in makefile

c:/arm/bin/../lib/gcc/arm-none-eabi/4.9.3/../../../../arm-none-eabi/bin/ld.exe:
warning: cannot find entry symbol Reset_Handler; not setting start address

replace it with "ResetISR" which is used in LPC code.

Replaced and get result:

Undefined reference to __data_section_table
This is at cr_startup_lp11xx.c
Probably names are different in linker scripts.
Compare linker scripts.

5.
Add the size tool to calculate size after make.


6.
At FreeRTOS 8.2.1 at main.c check with debugger why if we have label
defined at the linker script as:

    PROVIDE(_pvHeapStart = DEFINED(__user_heap_base) ? __user_heap_base : .);
    
And default this is used as:

extern unsigned long _pvHeapStart[];
    
but also is compilable as:

extern unsigned long _pvHeapStart;

This is used for get value of address where Heap start.

Similary to get address of memory where Stack start, we use

extern void _vStackTop(void);
ulInterruptStackSize = ( ( unsigned long ) &_vStackTop ) - ( ( unsigned long ) _pvHeapStart );

And this is my hack, before originally it was:

extern unsigned long _vStackTop[], _pvHeapStart[];
ulInterruptStackSize = ( ( unsigned long ) _vStackTop ) - ( ( unsigned long ) _pvHeapStart );

But it was not compilable.
I use pointer to function, because this is previously used at cr_startup_lpc11xx.c.





    

