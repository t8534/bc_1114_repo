
bc_11114 

Compare compilation parameters.

#############################################################
Completely first, init project with led ON
#############################################################


Settings:

--------------------------------------------------
MCU C compiler:

Command: arm-none-eabi-gcc

All options:

-DDEBUG -D__CODE_RED -DCORE_M0 -D__USE_LPCOPEN -D__LPC11XX__ -D__REDLIB__ -I"C:\data\HOME\git

\bc_1114_repo\bc_1114\inc" -I"C:\data\HOME\git\bc_1114_repo\bc_1114\src

\lpcexpresso_11c24_board_library\inc" -I"C:\data\HOME\git\bc_1114_repo\bc_1114\src

\lpc_chip_11cxx_library\inc" -O0 -g3 -Wall -c -fmessage-length=0 -fno-builtin -ffunction-sections 

-fdata-sections -mcpu=cortex-m0 -mthumb -specs=redlib.specs


Command line patter:  ${COMMAND} ${FLAGS} ${OUTPUT_FLAG} ${OUTPUT_PREFIX}${OUTPUT} ${INPUTS}

Summary MCU C compiler:

-DDEBUG
-D__CODE_RED
-DCORE_M0
-D__USE_LPCOPEN
-D__LPC11XX__
-D__REDLIB__

-O0
-g3
-Wall
-c
-fmessage-length=0
-fno-builtin
-ffunction-sections

-fdata-sections
-mcpu=cortex-m0
-mthumb
-specs=redlib.specs

--------------------------------------------------
MCU Assembler:

Command: arm-none-eabi-gcc

All options:

-c -x assembler-with-cpp -DDEBUG -D__CODE_RED -DCORE_M0 -D__USE_LPCOPEN -D__LPC11XX__ -D__REDLIB__ 

-I"C:\data\HOME\git\bc_1114_repo\bc_1114\inc" -I"C:\data\HOME\git\bc_1114_repo\bc_1114\src

\lpcexpresso_11c24_board_library\inc" -I"C:\data\HOME\git\bc_1114_repo\bc_1114\src

\lpc_chip_11cxx_library\inc" -g3 -mcpu=cortex-m0 -mthumb -specs=redlib.specs


Command line patter: ${COMMAND} ${FLAGS} ${OUTPUT_FLAG} ${OUTPUT_PREFIX}${OUTPUT} ${INPUTS}


Summary MCU Assembler:

-c
-x assembler-with-cpp
-DDEBUG
-D__CODE_RED
-DCORE_M0
-D__USE_LPCOPEN
-D__LPC11XX__
-D__REDLIB__ 

-g3
-mcpu=cortex-m0
-mthumb
-specs=redlib.specs

--------------------------------------------------
MCU Linker:

Command: arm-none-eabi-gcc


All options:

-nostdlib -L"C:\lpc750_workspace_lpc1114\nxp_lpcxpresso_11c24_board_lib\Debug" -L"C:

\lpc750_workspace_lpc1114\lpc_chip_11cxx_lib\Debug" -Xlinker -Map="bc_1114.map" -Xlinker --gc-

sections -mcpu=cortex-m0 -mthumb -T "bc_1114_Debug.ld"


Command line patter: ${COMMAND} ${FLAGS} ${OUTPUT_FLAG} ${OUTPUT_PREFIX}${OUTPUT} ${INPUTS}


Summary MCU Linker:
 
-nostdlib
-Xlinker
-Map="bc_1114.map"
-Xlinker --gc-sections 
-mcpu=cortex-m0 
-mthumb 
-T "bc_1114_Debug.ld"


#############################################################
nxp_lpcexpresso_11c24_periph_blinky
#############################################################


MCU C compiler:

Command: arm-none-eabi-gcc


All options:

-D__REDLIB__ -DDEBUG -D__CODE_RED -D__USE_LPCOPEN -DCORE_M0 -I"C:

\lpc750_workspace_lpc1114\nxp_lpcxpresso_11c24_periph_blinky\example\inc" -I"C:

\lpc750_workspace_lpc1114\lpc_chip_11cxx_lib\inc" -I"C:

\lpc750_workspace_lpc1114\nxp_lpcxpresso_11c24_board_lib\inc" -O0 -g3 -Wall -c -fmessage-length=0 

-fno-builtin -ffunction-sections -fdata-sections -mcpu=cortex-m0 -mthumb -D__REDLIB__ -

specs=redlib.specs


Command line patter: ${COMMAND} ${FLAGS} ${OUTPUT_FLAG} ${OUTPUT_PREFIX}${OUTPUT} ${INPUTS}


Summary MCU C compiler:

-D__REDLIB__
-DDEBUG
-D__CODE_RED
-D__USE_LPCOPEN
-DCORE_M0

-O0
-g3
-Wall
-c
-fmessage-length=0

-fno-builtin
-ffunction-sections
-fdata-sections
-mcpu=cortex-m0
-mthumb
-D__REDLIB__
-specs=redlib.specs


--------------------------------------------------

MCU Assembler:

Command: arm-none-eabi-gcc


All options:

-c -x assembler-with-cpp -D__REDLIB__ -DDEBUG -D__CODE_RED -g3 -mcpu=cortex-m0 -mthumb -

D__REDLIB__ -specs=redlib.specs


Command line patter: ${COMMAND} ${FLAGS} ${OUTPUT_FLAG} ${OUTPUT_PREFIX}${OUTPUT} ${INPUTS}


Summary MCU Assembler:

-c
-x assembler-with-cpp
-D__REDLIB__
-DDEBUG
-D__CODE_RED
-g3
-mcpu=cortex-m0
-mthumb
-D__REDLIB__
-specs=redlib.specs


--------------------------------------------------

MCU Linker:

Command: arm-none-eabi-gcc


All options:

-nostdlib -L"C:\lpc750_workspace_lpc1114\nxp_lpcxpresso_11c24_board_lib\Debug" -L"C:

\lpc750_workspace_lpc1114\lpc_chip_11cxx_lib\Debug" -Xlinker -

Map="nxp_lpcxpresso_11c24_periph_blinky.map" -Xlinker --gc-sections -mcpu=cortex-m0 -mthumb -T 

"nxp_lpcxpresso_11c24_periph_blinky_Debug.ld"


Command line patter: ${COMMAND} ${FLAGS} ${OUTPUT_FLAG} ${OUTPUT_PREFIX}${OUTPUT} ${INPUTS}


Summary MCU Linker:

-nostdlib
-Xlinker
-Map="nxp_lpcxpresso_11c24_periph_blinky.map"
-Xlinker --gc-sections
-mcpu=cortex-m0
-mthumb
-T"nxp_lpcxpresso_11c24_periph_blinky_Debug.ld"



-----------------------------------------------------

!!!!!! see
Nonrecursive make example:

http://evbergen.home.xs4all.nl/nonrecursive-make.html



==================================================================

[150521_1046]

C:\arm\launchpad\bin\arm-none-eabi-gcc 

../src/bc_1114.c 
../src/sys/cr_startup_lpc11xx.c 
../src/sys/crp.c 
../src/sys/sysinit.c 
../src/lpc_chip_11cxx_library/src/adc_11xx.c 
../src/lpc_chip_11cxx_library/src/chip_11xx.c 
../src/lpc_chip_11cxx_library/src/clock_11xx.c 
../src/lpc_chip_11cxx_library/src/gpio_11xx_1.c 
../src/lpc_chip_11cxx_library/src/gpio_11xx_2.c 
../src/lpc_chip_11cxx_library/src/gpiogroup_11xx.c 
../src/lpc_chip_11cxx_library/src/i2c_11xx.c 
../src/lpc_chip_11cxx_library/src/iocon_11xx.c 
../src/lpc_chip_11cxx_library/src/pinint_11xx.c 
../src/lpc_chip_11cxx_library/src/pmu_11xx.c 
../src/lpc_chip_11cxx_library/src/ring_buffer.c 
../src/lpc_chip_11cxx_library/src/ssp_11xx.c 
../src/lpc_chip_11cxx_library/src/sysctl_11xx.c 
../src/lpc_chip_11cxx_library/src/sysinit_11xx.c 
../src/lpc_chip_11cxx_library/src/timer_11xx.c 
../src/lpc_chip_11cxx_library/src/uart_11xx.c 
../src/lpc_chip_11cxx_library/src/wwdt_11xx.c 
../src/lpcexpresso_11c24_board_library/src/board_sysinit.c 
../src/lpcexpresso_11c24_board_library/src/board.c

-mthumb 
-mcpu=cortex-m0 

-I. 
-I../src 
-I../src/sys 
-I../src/lpc_chip_11cxx_library/inc 
-I../src/lpcexpresso_11c24_board_library/inc 

-DCORE_M0 
-D__USE_LPCOPEN  

-Os 
-flto 
-ffunction-sections 
-fdata-sections --specs=nano.specs --specs=nosys.specs 

-L. 
-L./ldscripts 

-T bc_1114_Debug.ld 

-Wl,--gc-sections 
-Wl,
-Map=bc_1114.map 
-o bc_1114.axf

----------------------------------------------------------------------------

[150522]

####
Removing -o $@ you and add option -c you can see all .o created.
####

Note from https://answers.launchpad.net/gcc-arm-embedded/+question/219962

First apology that I am not familiar with avr-gcc.
With our toolchain, you can specify below command line option to generate
c+assembly code lst file:

-Wa,-adhlns=xxx.lst

As for using it in Coocox, you should refer to their manual about how to pass
option in the IDE.

Hoping this can help.


In the mean time i found that solution for me is tool known as
"arm-none-eabi-objdump.exe". I use it like this:

arm-none-eabi-objdump.exe -D filename.elf > xxx.lst.

And that's all. After this i got file containing exactly what i wont.
The only problem i got now is how to use this tool via compiler or linker
scripts. For now I created a simple *.bat file which do every thing
so basically my problem is solved but i try to ask of CooCox forum how to do it
with scripts, and let You know about possibilities.



Yes, it helps. After -Wa,-adhlns=xxx.lst it not generate c plus assembly code.

But here, we get assembly code. But below, we get. 
arm-none-eabi-objdump.exe -D filename.axf > xxx.lst.

In addition, how it is made in LPCXpresso, which options ?

Also see here:

http://stackoverflow.com/questions/3655606/how-do-i-get-full-assembler-output-in-gcc

And if you've built with debugging symbols (i.e. compiled with -g), 
and you replace the -dr with -Srl, it will attempt to annotate the output with the
corresponding source lines.

objdump --prefix-addresses --show-raw-insn -dr file.o


####
Ok, working, finally if you want to get listing C and asm you have to compile
with -g (for C listing), and call objdump:

C:\arm\launchpad\bin\arm-none-eabi-objdump.exe -Srl minimum-CM0.axf > list_obj.lst
####
 

Ready for tests.
Maybe was not working because no -g option, and code was uploaded in debug mode ?
Or should be compiled to for non-debug and upload in any non-debug flash way.

Also maybe should be compiled in no nano options ?
Also check rom and ram size at bc_1114_Debug_mem.ld

----------------------------------------------------------------------------

[150523]

Working on HW. This is git rev. 3b90a4c.

To analyze is something interesting in the listing files.

Compare 

./doc/src_list_make_150523.lst  
./doc/src_list_xpresso_150523.lst

In the make one, at data_init() there is strange code from RingBuffer ???
But this is working.
And optimisation is disabled in both cases.

TODO:
Compare and analyse source files.

Make buiding .o inside of ./build, in place of temporary outside of the project.

 










